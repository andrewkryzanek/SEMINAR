pch = ".", color = rgb(1, 0, 0, 0.01)) + xlim(-3, 3) + ylim(-3, 3) + xlab("Theoretical t quantiles") +
ylab("Sample quantiles") + ggtitle("Exponential, n = 15"))
p + geom_abline(intercept = 0, slope = 1, color = "gray")
p <- ggplot(data = DF, aes(sample = TSE500)) + stat_qq(distribution = qt, dparams = list(df = 499),
pch = ".", color = rgb(1, 0, 0, 0.01)) + xlim(-3, 3) + ylim(-3, 3) + xlab("Theoretical t quantiles") +
ylab("Sample quantiles") + ggtitle("Exponential, n = 500")
p + geom_abline(intercept = 0, slope = 1, color = "gray")
p <- ggplot(data = DF, aes(sample = T.Sim)) + stat_qq(distribution = qt, dparams = list(df = 499),
pch = ".", color = rgb(1, 0, 0, 0.01)) + xlim(-3, 3) + ylim(-3, 3) + xlab("Theoretical t quantiles") +
ylab("Sample quantiles") + ggtitle("Exponential, n = 500")
p + geom_abline(intercept = 0, slope = 1, color = "gray")
p <- ggplot(data = DF, aes(sample = T.Sim2)) + stat_qq(distribution = qt, dparams = list(df = 499),
pch = ".", color = rgb(1, 0, 0, 0.01)) + xlim(-3, 3) + ylim(-3, 3) + xlab("Theoretical t quantiles") +
ylab("Sample quantiles") + ggtitle("Exponential, n = 500")
p + geom_abline(intercept = 0, slope = 1, color = "gray")
```
site <- "http://www1.appstate.edu/~arnholta/Data/Spruce.csv"
Spruce <- read.csv(file = url(site))
head(Spruce)
heightchange <- subset(Spruce, select = Ht.change, subset =!is.na(Ht.change), drop = T)
hist(heightchange)
M <- mean(heightchange)
S <- sd(heightchange)
ggplot(data = Spruce, aes(x = heightchange)) + geom_density(fill = "pink")
t.test(heightchange, conf.level = 0.95)$conf
site2 <- "http://www1.appstate.edu/~arnholta/Data/Girls2004.csv"
Girls <- read.csv(file = url(site2))
head(Girls)
weight <- subset(Girls, select = Weight, subset =!is.na(Weight), drop = T)
ggplot(data = Girls, aes(x = Weight)) + geom_density(fill = "aquamarine") + facet_grid(State~.)
MW <- tapply((Girls$Weight), list(Girls$State), mean)
SW <- tapply((Girls$Weight), list(Girls$State), sd)
mean.weight <- tapply(Girls$Weight,Girls$State,mean)
CI <- t.test(mean.weight, conf.level = .95)$conf
site <- "http://www1.appstate.edu/~arnholta/Data/Spruce.csv"
Spruce <- read.csv(file = url(site))
head(Spruce)
ggplot(data=Spruce,aes(x=Ht.change))+geom_density(fill="blue")+facet_grid(Fertilizer~.)
MP <- tapply((Spruce$Ht.change), list(Spruce$Fertilizer), median)
IP <- tapply((Spruce$Ht.change), list(Spruce$Fertilizer), IQR)
SCI <- t.test(Spruce$Ht.change~Spruce$Fertilizer, alt = "less")$conf
CI <- t.test(heightchange, conf.level = 0.95)$conf
DF <- data.frame(T.Sim1, T.Sim1.1, T.Sim2)
p <- ggplot(data = DF, aes(sample = T.Sim1.1) + stat_qq(distribution = qt, dparams = list(df = 14),
pch = ".", color = rgb(1, 0, 0, 0.01)) + xlim(-3, 3) + ylim(-3, 3) + xlab("Theoretical t quantiles") +
ylab("Sample quantiles") + ggtitle("Exponential, n = 15"))
p + geom_abline(intercept = 0, slope = 1, color = "gray")
set.seed(13)
n <- 15
q <- qt(0.975, n - 1)
N <- 10^5
T.Sim1 <- numeric(N)
for (i in 1:N) {
x <- runif(n, 0, 1)
xbar <- mean(x)
s <- sd(x)
T.Sim1[i] <- (xbar - 0.5)/(s/sqrt(n))
}
T.Sim1.1 <- numeric(N)
for (i in 1:N) {
x <- rexp(n, 1)
xbar <- mean(x)
s <- sd(x)
T.Sim1.1[i] <- (xbar - 1)/(s/sqrt(n))
}
n <- 500
T.Sim2<- numeric(N)
for (i in 1:N) {
x <- rexp(n, 1)
xbar <- mean(x)
s <- sd(x)
T.Sim2[i] <- (xbar - 1)/(s/sqrt(n))
}
DF <- data.frame(T.Sim1, T.Sim1.1, T.Sim2)
p <- ggplot(data = DF, aes(sample = T.Sim1.1) + stat_qq(distribution = qt, dparams = list(df = 14),
pch = ".", color = rgb(1, 0, 0, 0.01)) + xlim(-3, 3) + ylim(-3, 3) + xlab("Theoretical t quantiles") +
ylab("Sample quantiles") + ggtitle("Exponential, n = 15"))
p + geom_abline(intercept = 0, slope = 1, color = "gray")
p <- ggplot(data = DF, aes(sample = T.Sim2)) + stat_qq(distribution = qt, dparams = list(df = 499),
pch = ".", color = rgb(1, 0, 0, 0.01)) + xlim(-3, 3) + ylim(-3, 3) + xlab("Theoretical t quantiles") +
ylab("Sample quantiles") + ggtitle("Exponential, n = 500")
p + geom_abline(intercept = 0, slope = 1, color = "gray")
```
xbar <- mean(chlorine)
N <- 10^4
n <- length(chlorine)
Tstar <- numeric(N)
for (i in 1:N){
x <- sample(chlorine, size = n, replace = T)
Tstar[i] <- (mean(x) - xbar)/ (sd(x)/sqrt(n))
}
quantile(Tstar, c(.025, .975))
View(Bang)
xbar <- mean(chlorine)
S <- sd(chlorine)
N <- 10^5
n <- length(chlorine)
Tstar <- numeric(N)
Sstar <- numeric(N)
Xbarstar <- numeric(N)
set.seed(13)
for (i in 1:N) {
x <- sample(chlorine, size = n, replace = T)
Xbarstar[i] <- mean(x)
Sstar[i] <- sd(x)
}
Tstar <- (Xbarstar - xbar)/(Sstar/sqrt(n))
CIt <- quantile(Tstar, c(0.025, 0.975))
CIt
xbar <- mean(chlorine)
N <- 10^4
n <- length(chlorine)
Tstar <- numeric(N)
for (i in 1:N){
x <- sample(chlorine, size = n, replace = T)
Tstar[i] <- (mean(x) - xbar)/ (sd(x)/sqrt(n))
}
CI <- quantile(Tstar, c(.025, .975))
xbar <- mean(chlorine)
S <- sd(chlorine)
N <- 10^5
n <- length(chlorine)
Tstar <- numeric(N)
Sstar <- numeric(N)
Xbarstar <- numeric(N)
set.seed(13)
for (i in 1:N) {
x <- sample(chlorine, size = n, replace = T)
Xbarstar[i] <- mean(x)
Sstar[i] <- sd(x)
}
Tstar <- (Xbarstar - xbar)/(Sstar/sqrt(n))
CIt <- quantile(Tstar, c(0.025, 0.975))
CIt
CI
xbar <- mean(Alkalinity)
N <- 10^4
n <- length(Alkalinity)
Tstar <- numeric(N)
for (i in 1:N){
x <- sample(Alkalinity, size = n, replace = T)
Tstar[i] <- (mean(x) - xbar)/ (sd(x)/sqrt(n))
}
CI <- quantile(Tstar, c(.025, .975))
CI
#bootstrap t interval:
xbar <- mean(Alkalinity)
S <- sd(Alkalinity)
N <- 10^5
n <- length(Alkalinity)
Tstar <- numeric(N)
Sstar <- numeric(N)
Xbarstar <- numeric(N)
set.seed(13)
for (i in 1:N) {
x <- sample(Alkalinity, size = n, replace = T)
Xbarstar[i] <- mean(x)
Sstar[i] <- sd(x)
}
Tstar <- (Xbarstar - xbar)/(Sstar/sqrt(n))
CIt <- quantile(Tstar, c(0.025, 0.975))
CIt
CI
site <- "http://www1.appstate.edu/~arnholta/Data/Spruce.csv"
Spruce <- read.csv(file = url(site))
head(Spruce)
heightchange <- subset(Spruce, select = Ht.change, subset =!is.na(Ht.change), drop = T)
site <- "http://www1.appstate.edu/~arnholta/Data/Spruce.csv"
Spruce <- read.csv(file = url(site))
head(Spruce)
heightchange <- subset(Spruce, select = Ht.change, subset =!is.na(Ht.change), drop = T)
hist(heightchange)
M <- mean(heightchange)
S <- sd(heightchange)
ggplot(data = Spruce, aes(x = heightchange)) + geom_density(fill = "pink")
CI <- t.test(heightchange, conf.level = 0.95)$conf
site2 <- "http://www1.appstate.edu/~arnholta/Data/Girls2004.csv"
Girls <- read.csv(file = url(site2))
head(Girls)
weight <- subset(Girls, select = Weight, subset =!is.na(Weight), drop = T)
ggplot(data = Girls, aes(x = Weight)) + geom_density(fill = "aquamarine") + facet_grid(State~.)
MW <- tapply((Girls$Weight), list(Girls$State), mean)
SW <- tapply((Girls$Weight), list(Girls$State), sd)
mean.weight <- tapply(Girls$Weight,Girls$State,mean)
CI <- t.test(mean.weight, conf.level = .95)$conf
site <- "http://www1.appstate.edu/~arnholta/Data/Spruce.csv"
Spruce <- read.csv(file = url(site))
head(Spruce)
ggplot(data=Spruce,aes(x=Ht.change))+geom_density(fill="blue")+facet_grid(Fertilizer~.)
MP <- tapply((Spruce$Ht.change), list(Spruce$Fertilizer), median)
IP <- tapply((Spruce$Ht.change), list(Spruce$Fertilizer), IQR)
SCI <- t.test(Spruce$Ht.change~Spruce$Fertilizer, alt = "less")$conf
set.seed(13)
n <- 15
q <- qt(0.975, n - 1)
N <- 10^5
T.Sim1 <- numeric(N)
for (i in 1:N) {
x <- runif(n, 0, 1)
xbar <- mean(x)
s <- sd(x)
T.Sim1[i] <- (xbar - 0.5)/(s/sqrt(n))
}
T.Sim1.1 <- numeric(N)
for (i in 1:N) {
x <- rexp(n, 1)
xbar <- mean(x)
s <- sd(x)
T.Sim1.1[i] <- (xbar - 1)/(s/sqrt(n))
}
n <- 500
T.Sim2<- numeric(N)
for (i in 1:N) {
x <- rexp(n, 1)
xbar <- mean(x)
s <- sd(x)
T.Sim2[i] <- (xbar - 1)/(s/sqrt(n))
}
DF <- data.frame(T.Sim1, T.Sim1.1, T.Sim2)
p <- ggplot(data = DF, aes(sample = T.Sim1.1) + stat_qq(distribution = qt, dparams = list(df = 14),
pch = ".", color = rgb(1, 0, 0, 0.01)) + xlim(-3, 3) + ylim(-3, 3) + xlab("Theoretical t quantiles") +
ylab("Sample quantiles") + ggtitle("Exponential, n = 15"))
p + geom_abline(intercept = 0, slope = 1, color = "gray")
p <- ggplot(data = DF, aes(sample = T.Sim2)) + stat_qq(distribution = qt, dparams = list(df = 499),
DF <- data.frame(T.Sim1, T.Sim1.1, T.Sim2)
p <- ggplot(data = DF, aes(sample = T.Sim1.1) + stat_qq(distribution = qt, dparams = list(df = 14),
T.Sim2[i] <- (xbar - 1)/(s/sqrt(n))
}
DF <- data.frame(T.Sim1, T.Sim1.1, T.Sim2)
p <- ggplot(data = DF, aes(sample = T.Sim1.1) + stat_qq(distribution = qt, dparams = list(df = 14),
pch = ".", color = rgb(1, 0, 0, 0.01)) + xlim(-3, 3) + ylim(-3, 3) + xlab("Theoretical t quantiles") +
ylab("Sample quantiles") + ggtitle("Exponential, n = 15"))
set.seed(13)
n <- 15
q <- qt(0.975, n - 1)
N <- 10^5
T.Sim1 <- numeric(N)
for (i in 1:N) {
x <- runif(n, 0, 1)
xbar <- mean(x)
s <- sd(x)
T.Sim1[i] <- (xbar - 0.5)/(s/sqrt(n))
}
T.Sim1.1 <- numeric(N)
for (i in 1:N) {
x <- rexp(n, 1)
xbar <- mean(x)
s <- sd(x)
T.Sim1.1[i] <- (xbar - 1)/(s/sqrt(n))
}
n <- 500
T.Sim2<- numeric(N)
for (i in 1:N) {
x <- rexp(n, 1)
xbar <- mean(x)
s <- sd(x)
T.Sim2[i] <- (xbar - 1)/(s/sqrt(n))
}
DF <- data.frame(T.Sim1, T.Sim1.1, T.Sim2)
p <- ggplot(data = DF, aes(sample = T.Sim1.1) + stat_qq(distribution = qt, dparams = list(df = 14),
pch = ".", color = rgb(1, 0, 0, 0.01)) + xlim(-3, 3) + ylim(-3, 3) + xlab("Theoretical t quantiles") +
ylab("Sample quantiles") + ggtitle("Exponential, n = 15"))
ylab("Sample quantiles") + ggtitle("Exponential, n = 15")
set.seed(13)
n <- 15
q <- qt(0.975, n - 1)
N <- 10^5
T.Sim1 <- numeric(N)
for (i in 1:N) {
x <- runif(n, 0, 1)
xbar <- mean(x)
s <- sd(x)
T.Sim1[i] <- (xbar - 0.5)/(s/sqrt(n))
}
T.Sim1.1 <- numeric(N)
for (i in 1:N) {
x <- rexp(n, 1)
xbar <- mean(x)
s <- sd(x)
T.Sim1.1[i] <- (xbar - 1)/(s/sqrt(n))
}
n <- 500
T.Sim2<- numeric(N)
for (i in 1:N) {
x <- rexp(n, 1)
xbar <- mean(x)
s <- sd(x)
T.Sim2[i] <- (xbar - 1)/(s/sqrt(n))
}
DF <- data.frame(T.Sim1, T.Sim1.1, T.Sim2)
p <- ggplot(data = DF, aes(sample = T.Sim1.1) + stat_qq(distribution = qt, dparams = list(df = 14),
pch = ".", color = rgb(1, 0, 0, 0.01)) + xlim(-3, 3) + ylim(-3, 3) + xlab("Theoretical t quantiles") +
ylab("Sample quantiles") + ggtitle("Exponential, n = 15"))
p + geom_abline(intercept = 0, slope = 1, color = "gray")
library(PASWR)
install.packages("PASWR")
library(PASWR)
install.packages("PASWR")
install.packages("PASWR")
1.96* sqrt(p(1-p)/n) <= 0.03
1.96* $\sqrt(p(1-p)/n)$ <= 0.03
install.packages("MASS")
library("MASS", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library(MASS)
require(crabs)
require(MASS)
head(crabs)
FL <- crabs$FL
hist(FL)
hist(FL)
ggplot(data = crabs, aes(x = FL)) + geom_density(fill = "aquamarine")
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
ggplot(data = crabs, aes(x = FL)) + geom_density(fill = "aquamarine")
mean(FL)
FLm <- mean(FL)
FLsd <- sd(FL)
FLm
FLsd
library(MASS)
head(crabs)
FL <- crabs$FL
hist(FL)
ggplot(data = crabs, aes(x = FL)) + geom_density(fill = "aquamarine")
FLm <- mean(FL)
FLm
FLsd <- sd(FL)
FLsd
site <- "http://www.stat.berkeley.edu/users/statlabs/data/babies.data"
BABIES <- read.table(file = url(site))
head(BABIES)
BABIES$bwt[BABIES$bwt == 999] = NA
BABIES$bwt[BABIES$bwt == 999,.] = NA
BABIES$bwt[BABIES$bwt == 999,] = NA
BABIES$bwt = 999 == NA
BABIES$bwt = 999 == NA
[BABIES$bwt = 999] == NA
NA, NA, NA, NA, NA, NA))
mapvalues(Babies, from = c(bwt,gestation,parity,age,height,weight,smoke), to = NA)
library(plyr)
mapvalues(Babies, from = c(bwt,gestation,parity,age,height,weight,smoke), to = NA)
head(FL)
head(crabs)
View(BABIES)
fix(FL)
head(crabs)
O.crabs <- FL$O
O.crabs <-  subset(FL, select = "O", subset =!is.na("O"), drop = T)
view(O.crabs)
fix(O.crabs)
xbar <- mean(O.crabs)
S <- sd(O.crabs)
N <- 10^5
n <- length(O.crabs)
Tstar <- numeric(N)
Sstar <- numeric(N)
Xbarstar <- numeric(N)
set.seed(13)
for (i in 1:N) {
x <- sample(O.crabs, size = n, replace = T)
Xbarstar[i] <- mean(x)
Sstar[i] <- sd(x)
}
Tstar <- (Xbarstar - xbar)/(Sstar/sqrt(n))
CIt <- quantile(Tstar, c(0.025, 0.975))
CIt
CIt <- quantile(Tstar, c(0.05, 0.95))
CIt
MeanDiff <- mean(O.crabs) - mean(B.crabs)
B.crabs <- subset(FL, select = "B", subset =!is.na("O"), drop = T)
MeanDiff <- mean(O.crabs) - mean(B.crabs)
B.crabs <- subset(FL, select = "B", subset =!is.na("O"), drop = T)
MeanDiff <- mean(O.crabs) - mean(B.crabs)
N <- 10^5
n <- length(MeanDiff)
Tstar <- numeric(N)
Sstar <- numeric(N)
Xbarstar <- numeric(N)
set.seed(13)
for (i in 1:N) {
x <- sample(MeanDiff, size = n, replace = T)
Xbarstar[i] <- mean(x)
Sstar[i] <- sd(x)
}
Tstar <- (Xbarstar - xbar)/(Sstar/sqrt(n))
CIt <- quantile(Tstar, c(0.05, 0.95))
head(crabs)
O.crabs <-  subset(FL, select = "O", subset =!is.na("O"), drop = T)
xbar <- mean(O.crabs)
n <- length(O.crabs)
Tstar <- numeric(N)
set.seed(13)
for (i in 1:N) {
x <- sample(O.crabs, size = n, replace = T)
Tstar[i] <- (mean(x) - xbar)/(sd(x)/sqrt(n))
}
CIt <- quantile(Tstar, c(0.05, 0.95))
CIt
B.crabs <- subset(FL, select = "B", subset =!is.na("O"), drop = T)
MeanDiff <- mean(O.crabs) - mean(B.crabs)
n <- length(MeanDiff)
n
O.crabs <-  subset(FL, select = "O", subset =!is.na("O"), drop = T)
B.crabs <- subset(FL, select = "B", subset =!is.na("O"), drop = T)
thetahat <- mean(O.crabs) - mean(B.crabs)
nx <- length(O.crabs)
ny <- length(B.crabs)
SE <- sqrt(var(O.crabs)/nx + var(B.crabs)/ny)
N <- 10000
Tstar <- numeric(N)
for(i in 1:N){
bootx <- sample(O.crabs, nx, replace = TRUE)
booty <- sample(B.crabs, ny, replace = TRUE)
Tstar[i] <- (mean(bootx) - mean(booty) - thetahat)/ sqrt(var(bootx)/nx + var(booty)/ny)
}
thetahat - quantile(Tstar, c(0.05, 0.95)) * SE
BABIES <- read.table(file = "http://www.stat.berkeley.edu/users/statlabs/data/babies.data", header=TRUE, col.names = c("bwt", "gestation", "parity", "age", "height", "weight", "smoke"))
BABIES <- BABIES[2:length(BABIES$bwt),
BABIES$bwt[BABIES$bwt == 999] = NA
BABIES$gestation[BABIES$gestation == 999] = NA
BABIES$parity[BABIES$parity == 9] = NA
BABIES$age[BABIES$age == 99] = NA
BABIES$height[BABIES$height == 99] = NA
BABIES$weight[BABIES$weight == 999] = NA
BABIES$smoke[BABIES$smoke == 9] = NA
BABIES <- BABIES[2:length(BABIES$bwt),
BABIES$bwt[BABIES$bwt == 999] = NA,
BABIES$gestation[BABIES$gestation == 999] = NA,
BABIES$parity[BABIES$parity == 9] = NA,
BABIES$age[BABIES$age == 99] = NA,
BABIES <- read.table(file = "http://www.stat.berkeley.edu/users/statlabs/data/babies.data", header=TRUE, col.names = c("bwt", "gestation", "parity", "age", "height", "weight", "smoke"))
BABIES <- BABIES[2:length(BABIES$bwt)
BABIES$bwt[BABIES$bwt == 999] = NA
BABIES$gestation[BABIES$gestation == 999] = NA
BABIES$parity[BABIES$parity == 9] = NA
BABIES$age[BABIES$age == 99] = NA
BABIES$height[BABIES$height == 99] = NA
BABIES$weight[BABIES$weight == 999] = NA
BABIES$smoke[BABIES$smoke == 9] = NA
View(BABIES)
CLEAN <- na.omit(BABIES)
str(CLEAN)
O.crabs.BD <-  subset(crabs, select = BD, subset =!is.na("O"), drop = T)
B.crabs.BD <- subset(FL, select = "B", subset =!is.na("O"), drop = T)
thetahat <- mean(O.crabs) - mean(B.crabs)
nx <- length(O.crabs)
ny <- length(B.crabs)
SE <- sqrt(var(O.crabs)/nx + var(B.crabs)/ny)
N <- 10000
Tstar <- numeric(N)
for(i in 1:N){
bootx <- sample(O.crabs, nx, replace = TRUE)
booty <- sample(B.crabs, ny, replace = TRUE)
Tstar[i] <- (mean(bootx) - mean(booty) - thetahat)/ sqrt(var(bootx)/nx + var(booty)/ny)
}
CI <- thetahat - quantile(Tstar, c(0.05, 0.95)) * SE
CI
O.crabs.BD <-  subset(crabs, select = BD, subset =!is.na("O"), drop = T)
B.crabs.BD <- subset(FL, select = BD, subset =!is.na("O"), drop = T)
thetahat <- mean(O.crabs) - mean(B.crabs)
nx <- length(O.crabs.BD)
ny <- length(B.crabs.BD)
SE <- sqrt(var(O.crabs.BD)/nx + var(B.crabs.BD)/ny)
N <- 10000
Tstar <- numeric(N)
for(i in 1:N){
bootx <- sample(O.crabs.BD, nx, replace = TRUE)
booty <- sample(B.crabs.BD, ny, replace = TRUE)
Tstar[i] <- (mean(bootx) - mean(booty) - thetahat)/ sqrt(var(bootx)/nx + var(booty)/ny)
}
CI <- thetahat - quantile(Tstar, c(0.05, 0.95)) * SE
CI
MISS1 <- sum((rowSums(is.na(BABIES)) == 1) == TRUE)
MISS2 <- sum((rowSums(is.na(BABIES)) == 2) == TRUE)
MISS3 <- sum((rowSums(is.na(BABIES)) == 3) == TRUE)
MISS0 <- sum((rowSums(is.na(BABIES)) == 0) == TRUE)
MISS1
MISS2
MISS3
MISS0
length(CLEAN$bwt)
percent <- length(subset(CLEAN, select = parity, subset = (parity == 0 & smoke ==
0), drop = TRUE))/length(BABIES$parity) * 100
percent
MGEST0 <- mean(as.numeric(CLEAN$gestation[CLEAN$parity == 0]))
MGEST1 <- mean(as.numeric(CLEAN$gestation[CLEAN$parity == 1]))
set.seed(123)
GEST <- as.numeric(CLEAN$gestation)
N <- 10^4 - 1
result <- numeric(N)
for (i in 1:N) {
index <- sample(length(CLEAN$gestation), length(CLEAN$gestation[CLEAN$parity ==
0]), replace = FALSE)
result[i] <- mean(GEST[index]) - mean(GEST[-index])
}
MEANDIFF <- tapply(as.numeric(CLEAN$gestation), as.numeric(CLEAN$parity), mean)
MEANDIFF <- MEANDIFF[1] - MEANDIFF[2]
pvalue <- ((sum(result <= MEANDIFF) + 1)/(N + 1)) * 2
pvalue
N <- 10^3 - 1
result <- numeric(N)
for (i in 1:N) {
# T2 <- table(sample(DPSC$SEX), DPSC$DEATHPEN)
T2 <- xtabs(~sample(as.numeric(parity)) + as.numeric(smoke), data = CLEAN)
result[i] <- chisq.test(T2)$statistic
}
obs <- chisq.test(xtabs(~as.numeric(parity) + as.numeric(smoke), data = CLEAN))$statistic
pvalue <- (sum(result >= obs) + 1)/(N + 1)
pvalue
getwd()
getwd()
setwd("~/git_repositories/SEMINAR/Erin/summaries")
